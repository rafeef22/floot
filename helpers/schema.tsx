/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "user";

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface Products {
  brand: string;
  color: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  galleryImagesUrls: string[] | null;
  id: Generated<number>;
  isAvailable: Generated<boolean | null>;
  mainImageUrl: string;
  name: string;
  offerPrice: Numeric | null;
  price: Numeric;
  quality: string;
  size: string | null;
  stock: Generated<number | null>;
  updatedAt: Generated<Timestamp | null>;
  youtubeVideoUrl: string | null;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface Settings {
  key: string;
  updatedAt: Generated<Timestamp | null>;
  value: string;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  loginAttempts: LoginAttempts;
  products: Products;
  sessions: Sessions;
  settings: Settings;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.